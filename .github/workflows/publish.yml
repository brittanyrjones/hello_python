name: Publish to Test PyPI

on:
  workflow_run:
    workflows: ["Create Tag and Release"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  check_for_moratorium:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: change_management
    steps:
      - uses: actions/checkout@v4
      - env:
          TPS_API_TOKEN: ${{ secrets.TPS_API_TOKEN_PARAM }}
        run: ./scripts/release/tps-check-lock hello_python ${{ github.sha }}

  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: check_for_moratorium
    runs-on: ubuntu-latest
    environment: change_management
    steps:
      - uses: actions/checkout@v4

      - name: Get latest build workflow run
        id: get_workflow
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            # For tag pushes, get the commit SHA from the tag
            COMMIT_SHA=$(git rev-parse ${{ github.ref }})
          else
            # For branch pushes, use the current SHA
            COMMIT_SHA=${{ github.sha }}
          fi
          
          # Get the most recent successful build workflow run for this commit
          RUN_ID=$(gh run list --workflow "test-lint-build.yml" --branch main --json databaseId,conclusion,headSha --jq ".[] | select(.headSha == \"$COMMIT_SHA\" and .conclusion == \"success\") | .databaseId" | head -n 1)
          
          if [ -z "$RUN_ID" ]; then
            echo "No successful build found for commit $COMMIT_SHA"
            exit 1
          fi
          
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "Found build workflow run: $RUN_ID"

      - name: Download build artifacts
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p dist
          gh run download ${{ steps.get_workflow.outputs.run_id }} --name release-artifacts-main --dir dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          cache-dependency-glob: pyproject.toml

      - name: Release to Test PyPI
        run: uv publish --index testpypi dist/*

      - name: Publish To Change Management
        env:
          ACTOR_EMAIL: ${{ secrets.TPS_API_RELEASE_ACTOR_EMAIL }}
          TPS_API_TOKEN: ${{ secrets.TPS_API_TOKEN_PARAM }}
        run: ./scripts/release/tps-record-release hello_python ${{ github.sha }}
