#!/bin/bash
set -eu
set -o pipefail

# draft-release
# Script to create a release branch and PR for a new version
#
# Usage:
#   ./release/draft-release <bump_type> [previous_version]
#   bump_type: major, minor, or patch
#   previous_version: Optional previous version as it is currently defined in the changelog (e.g., 1.2.2)
#
# Example:
#   ./scripts/release/draft-release minor
#   ./scripts/release/draft-release patch 1.2.2

# Function to display usage
usage() {
    echo "Usage: $0 <bump_type> [previous_version]"
    echo "  bump_type: major, minor, or patch"
    echo "  previous_version: Optional previous version as it is currently defined in the changelog(e.g., 1.2.2)"
    exit 1
}

# Function to handle errors
handle_error() {
    local line_no=$1
    local error_code=$2
    local error_command=$3
    echo "Error occurred in line $line_no (exit code $error_code): $error_command"
    exit 1
}

# Set up error handling
trap 'handle_error ${LINENO} $? "$BASH_COMMAND"' ERR

# Check if required arguments are provided
if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    usage
fi

BUMP_TYPE=$1
PREV_VERSION=$2

# Validate bump type
if [[ ! "$BUMP_TYPE" =~ ^(major|minor|patch)$ ]]; then
    echo "Error: bump_type must be major, minor, or patch"
    usage
fi

# Get current version from pyproject.toml
if [ ! -f "pyproject.toml" ]; then
    echo "Error: pyproject.toml not found"
    exit 1
fi

CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
if [ -z "$CURRENT_VERSION" ]; then
    echo "Error: Could not find version in pyproject.toml"
    exit 1
fi

# If no previous version provided, use the one in pyproject.toml
if [ -z "$PREV_VERSION" ]; then
    PREV_VERSION=$CURRENT_VERSION
    echo "Using version currently defined in pyproject.toml ($CURRENT_VERSION) as previous version"
fi

# Validate version format
if ! [[ "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Error: Invalid version format in pyproject.toml: $CURRENT_VERSION"
    exit 1
fi

# Split version into components
IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
MAJOR="${VERSION_PARTS[0]}"
MINOR="${VERSION_PARTS[1]}"
PATCH="${VERSION_PARTS[2]}"

# Generate new version based on bump type
case "$BUMP_TYPE" in
    major)
        NEW_VERSION="$((MAJOR + 1)).0.0"
        ;;
    minor)
        NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
        ;;
    patch)
        NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
        ;;
esac

echo "Current version: $CURRENT_VERSION"
echo "New version: $NEW_VERSION"
echo "Previous version currently defined in changelog: $PREV_VERSION"

# Check if we're on main branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo "Error: Must be on main branch"
    exit 1
fi

# Check if working directory is clean
if ! git diff-index --quiet HEAD --; then
    echo "Error: Working directory is not clean. Please commit or stash your changes."
    exit 1
fi

# Check if GitHub CLI is installed and authenticated
if ! command -v gh &> /dev/null; then
    echo "Error: GitHub CLI (gh) is not installed"
    exit 1
fi

if ! gh auth status &> /dev/null; then
    echo "Error: GitHub CLI is not authenticated"
    exit 1
fi

# Create new branch
BRANCH_NAME="release-v$NEW_VERSION"
echo "Creating branch: $BRANCH_NAME"

# Check if branch already exists
if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
    echo "Error: Branch $BRANCH_NAME already exists"
    exit 1
fi

# Create and switch to new branch
if ! git checkout -b "$BRANCH_NAME"; then
    echo "Error: Failed to create branch $BRANCH_NAME"
    exit 1
fi

# Make the update-release-documentation script executable
if [ ! -f "scripts/release/update-release-documentation" ]; then
    echo "Error: update-release-documentation not found"
    git checkout main
    git branch -D "$BRANCH_NAME"
    exit 1
fi

chmod +x scripts/release/update-release-documentation

# Get the absolute path of the script's directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Call the update-release-documentation script with the new version
if ! "$SCRIPT_DIR/update-release-documentation" "$NEW_VERSION" "$PREV_VERSION"; then
    echo "Error: Failed to update release documentation"
    git checkout main
    git branch -D "$BRANCH_NAME"
    exit 1
fi

# Commit changes
if ! git add pyproject.toml CHANGELOG.md; then
    echo "Error: Failed to stage changes"
    git checkout main
    git branch -D "$BRANCH_NAME"
    exit 1
fi

if ! git commit -m "Bump version to $NEW_VERSION"; then
    echo "Error: Failed to commit changes"
    git checkout main
    git branch -D "$BRANCH_NAME"
    exit 1
fi

# Push branch
if ! git push -f -u origin "$BRANCH_NAME"; then
    echo "Error: Failed to push branch $BRANCH_NAME"
    git checkout main
    git branch -D "$BRANCH_NAME"
    exit 1
fi
echo "Successfully pushed branch $BRANCH_NAME"

# Create the pull request
echo "Creating pull request..."

# Construct PR body from template
PR_TEMPLATE=".github/PULL_REQUEST_TEMPLATE.md"
TEMP_PR_BODY=$(mktemp)
trap 'rm -f "$TEMP_PR_BODY"' EXIT

# Get git log since previous tag
PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
if [ -n "$PREV_TAG" ]; then
    GIT_LOG=$(git log --pretty=format:"- %s" "$PREV_TAG"..HEAD)
else
    GIT_LOG=$(git log --pretty=format:"- %s" HEAD)
fi

# Default PR body if no template
PR_BODY="## Changes\n\n- Updated version to $NEW_VERSION\n- Updated CHANGELOG.md with all changes since the previous release.\n\n## Checklist\n- [ ] Review changelog entries\n- [ ] Verify version bump\n- [ ] Test the changes\n- [ ] Approve the release\n- [ ] I've added or updated unit tests where necessary\n- [ ] I've added or updated documentation\n- [ ] I've run \`pdoc3\` to generate the documentation\n- [ ] I've manually tested the functionality in this PR\n- [ ] This pull request is ready for review"

if [ -f "$PR_TEMPLATE" ]; then
    # Create a temporary file with the template
    cp "$PR_TEMPLATE" "$TEMP_PR_BODY"

    # Add our changes to the Summary section
    sed -i '' '/^## Summary$/a\
- Updated version to '"$NEW_VERSION"'\
- Updated CHANGELOG.md with all changes since the previous release.' "$TEMP_PR_BODY"

    # Add git log to What Changed section
    echo "$GIT_LOG" > "$TEMP_PR_BODY.tmp"
    sed -i '' '/^## What Changed$/r '"$TEMP_PR_BODY.tmp" "$TEMP_PR_BODY"
    rm "$TEMP_PR_BODY.tmp"

    # Add our checklist items
    sed -i '' '/^## Checklist$/a\
- [ ] Review changelog entries\
- [ ] Verify version bump\
- [ ] Test the changes\
- [ ] Approve the release' "$TEMP_PR_BODY"

    PR_BODY=$(cat "$TEMP_PR_BODY")
fi

# Create PR
if ! gh pr create \
    --title "Release v$NEW_VERSION" \
    --body "$PR_BODY" \
    --base main \
    --head "release-v$NEW_VERSION" \
    --draft; then
    echo "Error: Failed to create pull request"
    exit 1
fi
echo "Successfully created pull request"

echo "Done! Review the changes and merge the pull request when ready."
